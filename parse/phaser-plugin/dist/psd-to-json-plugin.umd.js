(function(f,u){typeof exports=="object"&&typeof module<"u"?module.exports=u():typeof define=="function"&&define.amd?define(u):(f=typeof globalThis<"u"?globalThis:f||self,f.PsdToJSONPlugin=u())})(this,function(){"use strict";var T=Object.defineProperty;var L=(f,u,h)=>u in f?T(f,u,{enumerable:!0,configurable:!0,writable:!0,value:h}):f[u]=h;var y=(f,u,h)=>(L(f,typeof u!="symbol"?u+"":u,h),h);function f(l){let t=0,o=!1;return{load(e,n,s){const r=`${s}/data.json`;e.load.json(n,r),e.load.once("complete",()=>{const a=e.cache.json.get(n);this.processJSON(e,n,a,s)})},processJSON(e,n,s,r){l.psdData[n]={...s,basePath:r},l.options.debug&&console.log(`Loaded JSON for key "${n}":`,l.psdData[n]),this.loadAssetsFromJSON(e,n,l.psdData[n])},loadAssetsFromJSON(e,n,s){const r=s.sprites||[],a=s.tiles||{};let i=l.sprites.countSprites(r)+l.tiles.countTiles(a),d=0;l.options.debug&&console.log(`Total assets to load: ${i}`);const c=()=>{d++,t=d/i,e.events.emit("psdAssetsLoadProgress",t),l.options.debug&&(console.log(`Loaded asset ${d} of ${i}`),console.log(`Loading progress: ${(t*100).toFixed(2)}%`)),d===i&&(o=!0,e.events.emit("psdAssetsLoadComplete"),l.options.debug&&console.log("All PSD assets loaded"))};r.length>0&&l.sprites.load(e,r,s.basePath,c),a.layers&&a.layers.length>0&&l.tiles.load(e,a,s.basePath,c),i===0&&(o=!0,e.events.emit("psdAssetsLoadComplete")),e.load.isLoading()||e.load.start()},get progress(){return t},get complete(){return o}}}const p=class p{constructor(t){this.name=t.name,Object.keys(t).forEach(o=>{o!=="name"&&(this[o]=t[o])})}isStandardProp(t){return p.standardProps.includes(t)}getCustomAttributes(){return Object.keys(this).filter(t=>!this.isStandardProp(t)).reduce((t,o)=>(t[o]=this[o],t),{})}addDebugVisualization(t,o){let e;const n="0xff00de";switch(o){case"sprite":e=t.add.graphics(),e.lineStyle(2,n,1),e.strokeRect(this.x,this.y,this.width,this.height);break;case"zone":const s=t.add.container(this.bbox.left,this.bbox.top);if(this.subpaths&&this.subpaths.length>0){const r=this.bbox.right-this.bbox.left,a=this.bbox.bottom-this.bbox.top,i=t.add.rectangle(0,0,r,a,n,.5);i.setOrigin(0,0),s.add(i)}e=s;break;case"point":e=t.add.circle(this.x,this.y,10,n,.5);break;default:console.warn(`Unknown debug visualization type: ${o}`)}return e}};y(p,"standardProps",["name"]);let u=p;function h(l){return new u(l)}function P(l){return{place(t,o,e,n={}){const s=l.getData(e);if(!s||!s.points)return console.warn(`Point data for key '${e}' not found.`),null;const r=s.points.find(d=>d.name===o);if(!r)return console.warn(`Point '${o}' not found in PSD data for key '${e}'.`),null;const a=h(r),i=a.addDebugVisualization(t,"point",l,n);return l.options.debug&&console.log(`Placed point: ${o} at (${a.x}, ${a.y})`),{layerData:a,debugGraphics:i}},countPoints(t){return Array.isArray(t)?t.length:0}}}function w(l){return{load(t,o,e,n){o.forEach(s=>{this.loadSprite(t,s,e,n)})},loadSprite(t,o,e,n){const s=h(o),{name:r,filename:a}=s,i=`${e}/sprites/${a||r}.png`;t.load.image(r,i),t.load.once(`filecomplete-image-${r}`,n),l.options.debug&&console.log(`Loading sprite: ${r} from ${i}`)},create(t,o){return o.map(e=>{const n=h(e),{name:s,x:r,y:a,width:i,height:d}=n,c=t.add.image(r,a,s);return i!==void 0&&d!==void 0&&c.setDisplaySize(i,d),l.options.debug&&console.log(`Created sprite: ${s} at (${r}, ${a})`),{layerData:n,image:c}})},place(t,o,e){const n=l.getData(e);if(!n||!n.sprites)return console.warn(`Sprite data for key '${e}' not found.`),null;const s=n.sprites.find(a=>a.name===o);if(!s)return console.warn(`Sprite '${o}' not found in PSD data for key '${e}'.`),null;const r=h(s);return t.textures.exists(o)?this.placeLoadedSprite(t,r):(console.warn(`Texture for sprite '${o}' not found. Attempting to load it now.`),this.loadSprite(t,s,n.basePath,()=>(console.log(`Texture for sprite '${o}' loaded.`),this.placeLoadedSprite(t,r))),null)},placeLoadedSprite(t,o,e={}){const{name:n,x:s,y:r,width:a,height:i}=o,d=t.add.image(s,r,n);a!==void 0&&i!==void 0&&d.setDisplaySize(a,i),d.setOrigin(0,0);const c=o.addDebugVisualization(t,"sprite",l,e);return{layerData:o,image:d,debugGraphics:c}},countSprites(t){return Array.isArray(t)?t.length:0}}}function D(l){return{load(t,o,e,n){if(!o||!o.layers||o.layers.length===0){console.warn("No tiles to load or invalid tiles data");return}o.layers.forEach(s=>{for(let r=0;r<o.columns;r++)for(let a=0;a<o.rows;a++){const i=`${s.name}_tile_${r}_${a}`,d=`${e}/tiles/${o.tile_slice_size}/${i}.jpg`;t.load.image(i,d),t.load.once(`filecomplete-image-${i}`,n),l.options.debug&&console.log(`Loading tile: ${i} from ${d}`)}})},create(t,o){},countTiles(t){return!t||!t.layers?0:t.layers.length*t.columns*t.rows},place(t,o,e){const n=l.getData(e);if(!n||!n.tiles)return console.warn(`Tiles data for key '${e}' not found.`),null;const s=n.tiles;if(!s.layers.find(i=>i.name===o))return console.warn(`Tile layer '${o}' not found in PSD data for key '${e}'.`),null;const a=t.add.container(0,0);for(let i=0;i<s.columns;i++)for(let d=0;d<s.rows;d++){const c=`${o}_tile_${i}_${d}`,g=i*s.tile_slice_size,$=d*s.tile_slice_size;if(t.textures.exists(c)){const b=t.add.image(g,$,c).setOrigin(0,0);a.add(b),l.options.debug&&console.log(`Placed tile: ${c} at (${g}, ${$})`)}else console.warn(`Texture for tile ${c} not found`)}return a}}}function S(l){return{place(t,o,e,n={}){const s=l.getData(e);if(!s||!s.zones)return console.warn(`Zone data for key '${e}' not found.`),null;const r=s.zones.find(A=>A.name===o);if(!r)return console.warn(`Zone '${o}' not found in PSD data for key '${e}'.`),null;const a=h(r);let i;const{left:d,top:c,right:g,bottom:$}=a.bbox,b=g-d,m=$-c;i=t.add.zone(d,c,b,m),(!t.physics||!t.physics.world)&&t.physics.startSystem(Phaser.Physics.ARCADE),t.physics.add.existing(i,!0);const z=a.addDebugVisualization(t,"zone",l,n);return l.options.debug&&console.log(`Placed zone: ${o} at (${d}, ${c}) with dimensions ${b}x${m}`),{layerData:a,zoneObject:i,debugGraphics:z}},countZones(t){return Array.isArray(t)?t.length:0}}}class x extends Phaser.Plugins.BasePlugin{constructor(t){super(t),this.psdData={},this.options={debug:!1}}boot(){this.pluginManager.game.events.once("destroy",this.destroy,this)}init(t={}){this.options={...this.options,...t},this.data=f(this),this.points=P(this),this.sprites=w(this),this.tiles=D(this),this.zones=S(this),this.options.debug&&console.log("PsdToJSONPlugin initialized with options:",this.options)}load(t,o,e){this.data.load(t,o,e)}getData(t){return this.psdData[t]}}return x});

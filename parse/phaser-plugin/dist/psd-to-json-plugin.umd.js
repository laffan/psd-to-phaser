(function(u,f){typeof exports=="object"&&typeof module<"u"?module.exports=f():typeof define=="function"&&define.amd?define(f):(u=typeof globalThis<"u"?globalThis:u||self,u.PsdToJSONPlugin=f())})(this,function(){"use strict";function u(s){let t=0,a=!1;return{load(e,o,i,r={}){const l=`${i}/data.json`;e.load.json(o,l),e.load.once("complete",()=>{const d=e.cache.json.get(o);this.processJSON(e,o,d,i,r)})},processJSON(e,o,i,r,l){e.game.registry.set(o,i),s.psdData[o]=i,s.options.debug&&console.log(`Loaded JSON for key "${o}":`,i),l.noPreloading?(a=!0,e.events.emit("psdAssetsLoadComplete"),s.options.debug&&console.log("JSON loaded. Skipping asset preloading.")):this.loadAssetsFromJSON(e,i,r)},loadAssetsFromJSON(e,o,i){const r=(o.sprites||[]).filter(p=>!p.lazyLoad),l=(o.tiles||[]).filter(p=>!p.lazyLoad);let d=s.sprites.countSprites(r)+s.tiles.countTiles(l),n=0;s.options.debug&&(console.log(`Total assets to load: ${d}`),console.log(`Sprites to preload: ${r.length}`),console.log(`Tiles to preload: ${l.length}`)),r.length>0&&s.sprites.load(e,r,i),l.length>0&&s.tiles.load(e,l,i),e.load.on("filecomplete",()=>{n++,t=n/d,e.events.emit("psdAssetsLoadProgress",t),s.options.debug&&(console.log(`Loaded asset ${n} of ${d}`),console.log(`Loading progress: ${(t*100).toFixed(2)}%`))}),e.load.on("complete",()=>{a=!0,t=1,e.events.emit("psdAssetsLoadComplete"),s.options.debug&&console.log("All preloaded PSD assets loaded"),s.sprites.create(e,r)}),e.load.start()},get progress(){return t},get complete(){return a}}}function f(s){return{}}function m(s){return{load(t,a,e){if(!Array.isArray(a)){console.warn("No sprites to load or invalid sprites data");return}a.forEach(o=>{this.loadSprite(t,o,e)})},loadSprite(t,a,e){const{name:o,type:i,filename:r,x:l,y:d,width:n,height:p,frameWidth:g,frameHeight:h,frameCount:y}=a,c=`${e}/sprites/${r||o}`;switch(i){case"spritesheet":t.load.spritesheet(o,`${c}.png`,{frameWidth:g||n,frameHeight:h||p});break;case"atlas":t.load.atlas(o,`${c}.png`,`${c}.json`);break;case"animation":t.load.spritesheet(o,`${c}.png`,{frameWidth:g||n,frameHeight:h||p,endFrame:y});break;case"merge":case void 0:case null:case"":default:t.load.image(o,`${c}.png`);break}s.options.debug&&console.log(`Loaded sprite: ${o} (${i||"image"})`)},createSprite(t,a){const{name:e,x:o,y:i,type:r,frameRate:l,repeat:d}=a;let n;switch(r){case"spritesheet":case"atlas":n=t.add.sprite(o,i,e);break;case"animation":n=t.add.sprite(o,i,e),t.anims.create({key:`${e}_anim`,frames:t.anims.generateFrameNumbers(e,{start:0,end:-1}),frameRate:l||24,repeat:d===void 0?-1:d}),n.play(`${e}_anim`);break;case"merge":case void 0:case null:case"":default:n=t.add.image(o,i,e);break}return s.options.debug&&console.log(`Created sprite: ${e} at (${o}, ${i})`),n},countSprites(t){return Array.isArray(t)?t.reduce((a,e)=>e.type==="multi"&&Array.isArray(e.components)?a+this.countSprites(e.components):a+1,0):0}}}function $(s){return{load(t,a){},countTiles(t){return t?t.layers.length*t.columns*t.rows:0}}}function b(s){return{}}class S extends Phaser.Plugins.BasePlugin{constructor(t){super(t),this.psdData={},this.options={debug:!1}}boot(){this.pluginManager.game.events.once("destroy",this.destroy,this)}init(t={}){this.options={...this.options,...t},this.data=u(this),this.points=f(),this.sprites=m(this),this.tiles=$(),this.zones=b(),this.options.debug&&console.log("PsdToJSONPlugin initialized with options:",this.options)}load(t,a,e){this.data.load(t,a,e)}}return S});

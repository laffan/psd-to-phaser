(function(u,f){typeof exports=="object"&&typeof module<"u"?module.exports=f():typeof define=="function"&&define.amd?define(f):(u=typeof globalThis<"u"?globalThis:u||self,u.PsdToJSONPlugin=f())})(this,function(){"use strict";function u(n){let o=0,t=!1;return{load(e,i,s){const l=`${s}/data.json`;e.load.json(i,l),e.load.once("complete",()=>{const a=e.cache.json.get(i);this.processJSON(e,i,a,s)})},processJSON(e,i,s,l){n.psdData[i]={...s,basePath:l},n.options.debug&&console.log(`Loaded JSON for key "${i}":`,n.psdData[i]),this.loadAssetsFromJSON(e,i,n.psdData[i])},loadAssetsFromJSON(e,i,s){const l=s.sprites||[],a=s.tiles||{};let r=n.sprites.countSprites(l)+n.tiles.countTiles(a),d=0;n.options.debug&&console.log(`Total assets to load: ${r}`);const c=()=>{d++,o=d/r,e.events.emit("psdAssetsLoadProgress",o),n.options.debug&&(console.log(`Loaded asset ${d} of ${r}`),console.log(`Loading progress: ${(o*100).toFixed(2)}%`)),d===r&&(t=!0,e.events.emit("psdAssetsLoadComplete"),n.options.debug&&console.log("All PSD assets loaded"))};l.length>0&&n.sprites.load(e,l,s.basePath,c),a.layers&&a.layers.length>0&&n.tiles.load(e,a,s.basePath,c),r===0&&(t=!0,e.events.emit("psdAssetsLoadComplete")),e.load.isLoading()||e.load.start()},get progress(){return o},get complete(){return t}}}function f(n){return{}}function h(n){return{load(o,t,e,i){t.forEach(s=>{this.loadSprite(o,s,e,i)})},loadSprite(o,t,e,i){const{name:s,filename:l}=t,a=`${e}/sprites/${l||s}.png`;o.load.image(s,a),o.load.once(`filecomplete-image-${s}`,i),n.options.debug&&console.log(`Loading sprite: ${s} from ${a}`)},create(o,t){t.forEach(e=>{const{name:i,x:s,y:l}=e;o.add.image(s,l,i),n.options.debug&&console.log(`Created sprite: ${i} at (${s}, ${l})`)})},countSprites(o){return Array.isArray(o)?o.length:0},place(o,t,e){const i=n.getData(e);if(!i)return console.warn(`PSD data for key '${e}' not found.`),null;const s=i.sprites.find(c=>c.name===t);if(!s)return console.warn(`Sprite '${t}' not found in PSD data for key '${e}'.`),null;const{x:l,y:a,width:r,height:d}=s;return o.textures.exists(t)?this.placeLoadedSprite(o,t,l,a,r,d):(console.warn(`Texture for sprite '${t}' not found. Attempting to load it now.`),this.loadSprite(o,s,i.basePath,()=>{console.log(`Texture for sprite '${t}' loaded.`),this.placeLoadedSprite(o,t,l,a,r,d)}),null)},placeLoadedSprite(o,t,e,i,s,l){const a=o.add.image(e,i,t);return a.setOrigin(0,0),a.setDisplaySize(s,l),n.options.debug&&console.log(`Placed sprite: ${t} at (${e}, ${i}) with dimensions ${s}x${l}`),a}}}function $(n){return{load(o,t,e,i){if(!t||!t.layers||t.layers.length===0){console.warn("No tiles to load or invalid tiles data");return}t.layers.forEach(s=>{for(let l=0;l<t.columns;l++)for(let a=0;a<t.rows;a++){const r=`${s.name}_tile_${l}_${a}`,d=`${e}/tiles/${t.tile_slice_size}/${r}.jpg`;o.load.image(r,d),o.load.once(`filecomplete-image-${r}`,i),n.options.debug&&console.log(`Loading tile: ${r} from ${d}`)}})},create(o,t){},countTiles(o){return!o||!o.layers?0:o.layers.length*o.columns*o.rows},place(o,t,e){const i=n.getData(e);if(!i||!i.tiles)return console.warn(`Tiles data for key '${e}' not found.`),null;const s=i.tiles;if(!s.layers.find(r=>r.name===t))return console.warn(`Tile layer '${t}' not found in PSD data for key '${e}'.`),null;const a=o.add.container(0,0);for(let r=0;r<s.columns;r++)for(let d=0;d<s.rows;d++){const c=`${t}_tile_${r}_${d}`,p=r*s.tile_slice_size,g=d*s.tile_slice_size;if(o.textures.exists(c)){const S=o.add.image(p,g,c).setOrigin(0,0);a.add(S),n.options.debug&&console.log(`Placed tile: ${c} at (${p}, ${g})`)}else console.warn(`Texture for tile ${c} not found`)}return a}}}function m(n){return{}}class P extends Phaser.Plugins.BasePlugin{constructor(o){super(o),this.psdData={},this.options={debug:!1}}boot(){this.pluginManager.game.events.once("destroy",this.destroy,this)}init(o={}){this.options={...this.options,...o},this.data=u(this),this.points=f(),this.sprites=h(this),this.tiles=$(this),this.zones=m(),this.options.debug&&console.log("PsdToJSONPlugin initialized with options:",this.options)}load(o,t,e){this.data.load(o,t,e)}getData(o){return this.psdData[o]}}return P});
